library(tidymodels)
library(vip)
library(doParallel)
library(sparklyr)
library(ggplot2)

-----------------------------------------------------------------------------------------------------------------
#data

data = fishdf_joined2[, c(4:18)]
data[data == 0] = 0.000000001


set.seed(123)
split = initial_split(data, strata = Total_Fish_g_m2, prop = 0.8)
train = training(split)
test = testing(split)
set.seed(123)
train_cv = vfold_cv(train, strata = Total_Fish_g_m2, v = 3)

-----------------------------------------------------------------------------------------------------------------
#model and preprocess

rf_recipe = recipe(Total_Fish_g_m2~., data = train) %>%
  step_log(all_outcomes()) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())

rf_model = rand_forest(mtry = tune(), min_n = tune(), trees = tune()) %>% 
  set_engine('ranger', importance = 'impurity') %>% set_mode('regression')

rf_workflow = workflow() %>% add_model(rf_model) %>% add_recipe(rf_recipe)

sqrt(ncol(train))

#rf_grid = grid_latin_hypercube(min_n(), mtry(range = c(2,8)), trees(), size = 100)
rf_grid = grid_latin_hypercube(min_n(range = c(5,15)), mtry(range = c(2,12)), trees(range = c(200,700)), size = 100)
plot(rf_grid)


doParallel::registerDoParallel()
set.seed(123)
rf_tune = rf_workflow %>% tune_grid(resamples = train_cv, grid = rf_grid, metrics = metric_set(rmse, mae, rsq))

show_best(rf_tune, metric = 'rmse')
autoplot(rf_tune)

-----------------------------------------------------------------------------------------------------------------
#tuning and prediction

tuned_model = rf_workflow %>% finalize_workflow(show_best(x = rf_tune, metric = 'rmse', n = 1))
final_rf = tuned_model %>% last_fit(split, metrics = metric_set(rmse, mae, rsq))

final_model <- final_rf$.workflow[[1]]$fit$fit  
test_processed <- rf_recipe %>% prep(data = test) %>% bake(new_data = test)
predictions <- predict(final_model, new_data = test_processed)
print(predictions)
-----------------------------------------------------------------------------------------------------------------
#add feature importance section
-----------------------------------------------------------------------------------------------------------------
#visualization 

ggplot(rf_tune %>% collect_metrics(), aes(x = mtry, y = mean, color = .metric)) +
  geom_point(position = position_dodge(width = 0.3)) +
  facet_wrap(~.metric, scales = "free_y") +
  labs(x = "mtry", y = "Value") +
  theme_minimal()


ggplot(data = predictions, aes(x = .pred, y = test_processed$Total_Fish_g_m2)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Observed vs Predicted",
       x = "Predicted Values",
       y = "Observed Values")
